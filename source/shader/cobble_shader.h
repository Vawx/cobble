#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input ../../../../content/shader/cobble_shader.glsl --output ../../../../source/shader/cobble_shader.h --slang glsl430:hlsl5:metal_macos

    Overview:
    =========
    Shader program: 'skinned_lit':
        Get shader desc: skinned_lit_shader_desc(sg_query_backend());
        Vertex Shader: skinned_vertex
        Fragment Shader: lit_pixel
        Attributes:
            ATTR_skinned_lit_a_position => 0
            ATTR_skinned_lit_a_normal => 1
            ATTR_skinned_lit_a_uv => 2
            ATTR_skinned_lit_a_vertex_index => 3
            ATTR_skinned_lit_a_bone_indices => 4
            ATTR_skinned_lit_a_bone_weights => 5
    Shader program: 'static_lit':
        Get shader desc: static_lit_shader_desc(sg_query_backend());
        Vertex Shader: static_vertex
        Fragment Shader: lit_pixel
        Attributes:
            ATTR_static_lit_a_position => 0
            ATTR_static_lit_a_normal => 1
            ATTR_static_lit_a_uv => 2
            ATTR_static_lit_a_vertex_index => 3
    Bindings:
        Uniform block 'mesh_vertex_ubo':
            C struct: mesh_vertex_ubo_t
            Bind slot: UB_mesh_vertex_ubo => 0
        Uniform block 'skin_vertex_ubo':
            C struct: skin_vertex_ubo_t
            Bind slot: UB_skin_vertex_ubo => 1
        Uniform block 'uv_tiling_ubo':
            C struct: uv_tiling_ubo_t
            Bind slot: UB_uv_tiling_ubo => 2
        Image 'diffuse_texture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_diffuse_texture => 0
        Sampler 'diffuse_sampler':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_diffuse_sampler => 0
        Image Sampler Pair 'diffuse_texture_diffuse_sampler':
            Image: diffuse_texture
            Sampler: diffuse_sampler
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before cobble_shader.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_skinned_lit_a_position (0)
#define ATTR_skinned_lit_a_normal (1)
#define ATTR_skinned_lit_a_uv (2)
#define ATTR_skinned_lit_a_vertex_index (3)
#define ATTR_skinned_lit_a_bone_indices (4)
#define ATTR_skinned_lit_a_bone_weights (5)
#define ATTR_static_lit_a_position (0)
#define ATTR_static_lit_a_normal (1)
#define ATTR_static_lit_a_uv (2)
#define ATTR_static_lit_a_vertex_index (3)
#define UB_mesh_vertex_ubo (0)
#define UB_skin_vertex_ubo (1)
#define UB_uv_tiling_ubo (2)
#define IMG_diffuse_texture (0)
#define SMP_diffuse_sampler (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct mesh_vertex_ubo_t {
    mat4 geometry_to_world;
    mat4 normal_to_world;
    mat4 world_to_clip;
    vec4 blend_weights[16];
    float f_num_blend_shapes;
    uint8_t _pad_452[12];
} mesh_vertex_ubo_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct skin_vertex_ubo_t {
    mat4 bones[64];
} skin_vertex_ubo_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct uv_tiling_ubo_t {
    float tile_x;
    float tile_y;
    uint8_t _pad_8[8];
} uv_tiling_ubo_t;
#pragma pack(pop)
/*
    #version 430

    uniform vec4 mesh_vertex_ubo[29];
    layout(location = 0) in vec3 a_position;
    layout(location = 3) in float a_vertex_index;
    layout(location = 0) out vec3 v_normal;
    layout(location = 1) in vec3 a_normal;
    layout(location = 1) out vec2 v_uv;
    layout(location = 2) in vec2 a_uv;

    vec3 evaluate_blend_shape(int vertex_index)
    {
        return vec3(0.0);
    }

    void main()
    {
        vec3 local_pos = a_position;
        int param = int(a_vertex_index);
        vec3 _84 = local_pos;
        vec3 _85 = _84 + evaluate_blend_shape(param);
        local_pos = _85;
        gl_Position = mat4(mesh_vertex_ubo[8], mesh_vertex_ubo[9], mesh_vertex_ubo[10], mesh_vertex_ubo[11]) * vec4((mat4(mesh_vertex_ubo[0], mesh_vertex_ubo[1], mesh_vertex_ubo[2], mesh_vertex_ubo[3]) * vec4(_85, 1.0)).xyz, 1.0);
        v_normal = normalize((mat4(mesh_vertex_ubo[4], mesh_vertex_ubo[5], mesh_vertex_ubo[6], mesh_vertex_ubo[7]) * vec4(a_normal, 0.0)).xyz);
        v_uv = a_uv;
    }

*/
static const uint8_t static_vertex_source_glsl430[926] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x32,0x39,0x5d,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x65,
    0x63,0x33,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,
    0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x6f,0x63,0x61,
    0x6c,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x38,0x35,0x20,
    0x3d,0x20,0x5f,0x38,0x34,0x20,0x2b,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,
    0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,
    0x6f,0x73,0x20,0x3d,0x20,0x5f,0x38,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,
    0x28,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,
    0x5b,0x38,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,
    0x5f,0x75,0x62,0x6f,0x5b,0x39,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x65,
    0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x31,
    0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,
    0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,
    0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x31,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x32,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,
    0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x33,0x5d,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x38,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,
    0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x34,0x5d,0x2c,0x20,
    0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,
    0x35,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x36,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,
    0x76,0x20,0x3d,0x20,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    uniform vec4 mesh_vertex_ubo[29];
    uniform vec4 skin_vertex_ubo[256];
    layout(location = 4) in vec4 a_bone_indices;
    layout(location = 5) in vec4 a_bone_weights;
    layout(location = 0) in vec3 a_position;
    layout(location = 3) in float a_vertex_index;
    layout(location = 1) in vec3 a_normal;
    layout(location = 0) out vec3 v_normal;
    layout(location = 1) out vec2 v_uv;
    layout(location = 2) in vec2 a_uv;

    vec3 evaluate_blend_shape(int vertex_index)
    {
        return vec3(0.0);
    }

    void main()
    {
        mat4 _94 = mat4(skin_vertex_ubo[int(a_bone_indices.x) * 4 + 0], skin_vertex_ubo[int(a_bone_indices.x) * 4 + 1], skin_vertex_ubo[int(a_bone_indices.x) * 4 + 2], skin_vertex_ubo[int(a_bone_indices.x) * 4 + 3]) * a_bone_weights.x;
        mat4 _103 = mat4(skin_vertex_ubo[int(a_bone_indices.y) * 4 + 0], skin_vertex_ubo[int(a_bone_indices.y) * 4 + 1], skin_vertex_ubo[int(a_bone_indices.y) * 4 + 2], skin_vertex_ubo[int(a_bone_indices.y) * 4 + 3]) * a_bone_weights.y;
        mat4 _125 = mat4(skin_vertex_ubo[int(a_bone_indices.z) * 4 + 0], skin_vertex_ubo[int(a_bone_indices.z) * 4 + 1], skin_vertex_ubo[int(a_bone_indices.z) * 4 + 2], skin_vertex_ubo[int(a_bone_indices.z) * 4 + 3]) * a_bone_weights.z;
        mat4 _147 = mat4(skin_vertex_ubo[int(a_bone_indices.w) * 4 + 0], skin_vertex_ubo[int(a_bone_indices.w) * 4 + 1], skin_vertex_ubo[int(a_bone_indices.w) * 4 + 2], skin_vertex_ubo[int(a_bone_indices.w) * 4 + 3]) * a_bone_weights.w;
        mat4 _160 = mat4(((_94[0] + _103[0]) + _125[0]) + _147[0], ((_94[1] + _103[1]) + _125[1]) + _147[1], ((_94[2] + _103[2]) + _125[2]) + _147[2], ((_94[3] + _103[3]) + _125[3]) + _147[3]);
        vec3 local_pos = a_position;
        int param = int(a_vertex_index);
        vec3 _170 = local_pos;
        vec3 _171 = _170 + evaluate_blend_shape(param);
        local_pos = _171;
        vec4 _180 = _160 * vec4(_171, 1.0);
        gl_Position = mat4(mesh_vertex_ubo[8], mesh_vertex_ubo[9], mesh_vertex_ubo[10], mesh_vertex_ubo[11]) * vec4(_180.xyz, 1.0);
        v_normal = normalize((_160 * vec4(a_normal, 0.0)).xyz);
        v_uv = a_uv;
    }

*/
static const uint8_t skinned_vertex_source_glsl430[2037] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x32,0x39,0x5d,0x3b,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x73,0x6b,0x69,
    0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x32,0x35,0x36,
    0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x35,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x5f,0x62,
    0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,
    0x65,0x78,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,
    0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,
    0x68,0x61,0x70,0x65,0x28,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x39,0x34,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x30,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x31,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x32,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x33,0x5d,0x29,0x20,0x2a,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,
    0x67,0x68,0x74,0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x31,0x30,0x33,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x73,0x6b,0x69,
    0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,
    0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x5d,0x2c,0x20,0x73,0x6b,0x69,
    0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,
    0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x5d,0x2c,0x20,0x73,0x6b,0x69,
    0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,
    0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x32,0x5d,0x2c,0x20,0x73,0x6b,0x69,
    0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,
    0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x33,0x5d,0x29,0x20,0x2a,0x20,0x61,
    0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x32,0x35,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,
    0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x30,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,
    0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x31,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,
    0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x32,0x5d,0x2c,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,
    0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x33,0x5d,0x29,0x20,0x2a,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x5f,0x31,0x34,0x37,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x73,
    0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,
    0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x5d,0x2c,0x20,0x73,
    0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,
    0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x5d,0x2c,0x20,0x73,
    0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,
    0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x32,0x5d,0x2c,0x20,0x73,
    0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x69,
    0x6e,0x74,0x28,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x33,0x5d,0x29,0x20,0x2a,
    0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,
    0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x36,0x30,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x28,0x28,0x5f,0x39,0x34,0x5b,0x30,0x5d,
    0x20,0x2b,0x20,0x5f,0x31,0x30,0x33,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,
    0x32,0x35,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x37,0x5b,0x30,0x5d,
    0x2c,0x20,0x28,0x28,0x5f,0x39,0x34,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,
    0x33,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x31,0x5d,0x29,
    0x20,0x2b,0x20,0x5f,0x31,0x34,0x37,0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x39,
    0x34,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x33,0x5b,0x32,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,
    0x37,0x5b,0x32,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x39,0x34,0x5b,0x33,0x5d,0x20,0x2b,
    0x20,0x5f,0x31,0x30,0x33,0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,
    0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x37,0x5b,0x33,0x5d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,
    0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x31,0x37,0x30,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x31,0x20,
    0x3d,0x20,0x5f,0x31,0x37,0x30,0x20,0x2b,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,
    0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x31,0x37,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x38,0x30,0x20,0x3d,0x20,0x5f,0x31,0x36,0x30,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x31,0x37,0x31,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x38,0x5d,0x2c,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x39,
    0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,
    0x62,0x6f,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x5f,0x31,0x38,0x30,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,0x31,
    0x36,0x30,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x61,0x5f,0x75,0x76,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    uniform vec4 uv_tiling_ubo[1];
    layout(binding = 16) uniform sampler2D diffuse_texture_diffuse_sampler;

    layout(location = 1) in vec2 v_uv;
    layout(location = 0) out vec4 o_color;
    layout(location = 0) in vec3 v_normal;

    void main()
    {
        o_color = texture(diffuse_texture_diffuse_sampler, vec2(max(1.0, uv_tiling_ubo[0].x) * v_uv.x, max(1.0, uv_tiling_ubo[0].y) * v_uv.y));
    }

*/
static const uint8_t lit_pixel_source_glsl430[390] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x75,0x76,0x5f,0x74,0x69,
    0x6c,0x69,0x6e,0x67,0x5f,0x75,0x62,0x6f,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,0x36,
    0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x76,0x65,0x63,
    0x32,0x28,0x6d,0x61,0x78,0x28,0x31,0x2e,0x30,0x2c,0x20,0x75,0x76,0x5f,0x74,0x69,
    0x6c,0x69,0x6e,0x67,0x5f,0x75,0x62,0x6f,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x78,0x28,0x31,0x2e,0x30,
    0x2c,0x20,0x75,0x76,0x5f,0x74,0x69,0x6c,0x69,0x6e,0x67,0x5f,0x75,0x62,0x6f,0x5b,
    0x30,0x5d,0x2e,0x79,0x29,0x20,0x2a,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer mesh_vertex_ubo : register(b0)
    {
        row_major float4x4 _32_geometry_to_world : packoffset(c0);
        row_major float4x4 _32_normal_to_world : packoffset(c4);
        row_major float4x4 _32_world_to_clip : packoffset(c8);
        float4 _32_blend_weights[16] : packoffset(c12);
        float _32_f_num_blend_shapes : packoffset(c28);
    };


    static float4 gl_Position;
    static float3 a_position;
    static float a_vertex_index;
    static float3 v_normal;
    static float3 a_normal;
    static float2 v_uv;
    static float2 a_uv;

    struct SPIRV_Cross_Input
    {
        float3 a_position : TEXCOORD0;
        float3 a_normal : TEXCOORD1;
        float2 a_uv : TEXCOORD2;
        float a_vertex_index : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float3 v_normal : TEXCOORD0;
        float2 v_uv : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    float3 evaluate_blend_shape(int vertex_index)
    {
        return 0.0f.xxx;
    }

    void vert_main()
    {
        float3 local_pos = a_position;
        int param = int(a_vertex_index);
        float3 _84 = local_pos;
        float3 _85 = _84 + evaluate_blend_shape(param);
        local_pos = _85;
        gl_Position = mul(float4(mul(float4(_85, 1.0f), _32_geometry_to_world).xyz, 1.0f), _32_world_to_clip);
        v_normal = normalize(mul(float4(a_normal, 0.0f), _32_normal_to_world).xyz);
        v_uv = a_uv;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        a_position = stage_input.a_position;
        a_vertex_index = stage_input.a_vertex_index;
        a_normal = stage_input.a_normal;
        a_uv = stage_input.a_uv;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.v_normal = v_normal;
        stage_output.v_uv = v_uv;
        return stage_output;
    }
*/
static const uint8_t static_vertex_source_hlsl5[1680] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,
    0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x33,0x32,0x5f,0x67,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,0x74,0x6f,0x5f,
    0x77,0x6f,0x72,0x6c,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,
    0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,
    0x33,0x32,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,0x5f,0x77,0x6f,0x72,
    0x6c,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,
    0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x33,0x32,0x5f,
    0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x32,0x5f,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,
    0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,
    0x32,0x5f,0x66,0x5f,0x6e,0x75,0x6d,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,
    0x61,0x70,0x65,0x73,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x32,0x38,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,
    0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,
    0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x61,0x5f,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,
    0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,
    0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x69,0x6e,
    0x74,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x30,0x2e,0x30,
    0x66,0x2e,0x78,0x78,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,
    0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,
    0x73,0x20,0x3d,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x69,0x6e,0x74,0x28,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,
    0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x5f,0x38,0x34,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x38,0x35,0x20,
    0x3d,0x20,0x5f,0x38,0x34,0x20,0x2b,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,
    0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,
    0x6f,0x73,0x20,0x3d,0x20,0x5f,0x38,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x5f,0x38,0x35,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x33,
    0x32,0x5f,0x67,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,0x74,0x6f,0x5f,0x77,0x6f,
    0x72,0x6c,0x64,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,
    0x20,0x5f,0x33,0x32,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,
    0x69,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6d,0x75,
    0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x33,0x32,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x29,0x2e,0x78,
    0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,
    0x61,0x5f,0x75,0x76,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,
    0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x61,0x5f,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x76,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x76,0x5f,
    0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,

};
/*
    cbuffer mesh_vertex_ubo : register(b0)
    {
        row_major float4x4 _32_geometry_to_world : packoffset(c0);
        row_major float4x4 _32_normal_to_world : packoffset(c4);
        row_major float4x4 _32_world_to_clip : packoffset(c8);
        float4 _32_blend_weights[16] : packoffset(c12);
        float _32_f_num_blend_shapes : packoffset(c28);
    };

    cbuffer skin_vertex_ubo : register(b1)
    {
        row_major float4x4 _80_bones[64] : packoffset(c0);
    };


    static float4 gl_Position;
    static int4 a_bone_indices;
    static float4 a_bone_weights;
    static float3 a_position;
    static float a_vertex_index;
    static float3 a_normal;
    static float3 v_normal;
    static float2 v_uv;
    static float2 a_uv;

    struct SPIRV_Cross_Input
    {
        float3 a_position : TEXCOORD0;
        float3 a_normal : TEXCOORD1;
        float2 a_uv : TEXCOORD2;
        float a_vertex_index : TEXCOORD3;
        int4 a_bone_indices : TEXCOORD4;
        float4 a_bone_weights : TEXCOORD5;
    };

    struct SPIRV_Cross_Output
    {
        float3 v_normal : TEXCOORD0;
        float2 v_uv : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    float3 evaluate_blend_shape(int vertex_index)
    {
        return 0.0f.xxx;
    }

    void vert_main()
    {
        float4x4 _96 = _80_bones[a_bone_indices.x] * a_bone_weights.x;
        float4x4 _104 = _80_bones[a_bone_indices.y] * a_bone_weights.y;
        float4x4 _125 = _80_bones[a_bone_indices.z] * a_bone_weights.z;
        float4x4 _146 = _80_bones[a_bone_indices.w] * a_bone_weights.w;
        float4x4 _159 = float4x4(((_96[0] + _104[0]) + _125[0]) + _146[0], ((_96[1] + _104[1]) + _125[1]) + _146[1], ((_96[2] + _104[2]) + _125[2]) + _146[2], ((_96[3] + _104[3]) + _125[3]) + _146[3]);
        float3 local_pos = a_position;
        int param = int(a_vertex_index);
        float3 _169 = local_pos;
        float3 _170 = _169 + evaluate_blend_shape(param);
        local_pos = _170;
        float4 _179 = mul(float4(_170, 1.0f), _159);
        gl_Position = mul(float4(_179.xyz, 1.0f), _32_world_to_clip);
        v_normal = normalize(mul(float4(a_normal, 0.0f), _159).xyz);
        v_uv = a_uv;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        a_bone_indices = stage_input.a_bone_indices;
        a_bone_weights = stage_input.a_bone_weights;
        a_position = stage_input.a_position;
        a_vertex_index = stage_input.a_vertex_index;
        a_normal = stage_input.a_normal;
        a_uv = stage_input.a_uv;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.v_normal = v_normal;
        stage_output.v_uv = v_uv;
        return stage_output;
    }
*/
static const uint8_t skinned_vertex_source_hlsl5[2478] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,
    0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x33,0x32,0x5f,0x67,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,0x74,0x6f,0x5f,
    0x77,0x6f,0x72,0x6c,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,
    0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,
    0x33,0x32,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,0x5f,0x77,0x6f,0x72,
    0x6c,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,
    0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x33,0x32,0x5f,
    0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x32,0x5f,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,
    0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,
    0x32,0x5f,0x66,0x5f,0x6e,0x75,0x6d,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,
    0x61,0x70,0x65,0x73,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x32,0x38,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,
    0x66,0x65,0x72,0x20,0x73,0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x75,0x62,0x6f,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,
    0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,
    0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x38,0x30,0x5f,
    0x62,0x6f,0x6e,0x65,0x73,0x5b,0x36,0x34,0x5d,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x69,0x6e,0x74,0x34,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,
    0x67,0x68,0x74,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x5f,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,
    0x5f,0x75,0x76,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x61,0x5f,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x5f,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x34,
    0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x34,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,
    0x65,0x69,0x67,0x68,0x74,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x35,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x5f,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,
    0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x78,0x34,0x20,0x5f,0x39,0x36,0x20,0x3d,0x20,0x5f,0x38,0x30,0x5f,0x62,0x6f,
    0x6e,0x65,0x73,0x5b,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x2e,0x78,0x5d,0x20,0x2a,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x30,0x34,0x20,0x3d,0x20,0x5f,0x38,
    0x30,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x5d,0x20,0x2a,0x20,0x61,0x5f,0x62,0x6f,
    0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x32,0x35,0x20,
    0x3d,0x20,0x5f,0x38,0x30,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x61,0x5f,0x62,0x6f,
    0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x5d,0x20,0x2a,0x20,
    0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,
    0x31,0x34,0x36,0x20,0x3d,0x20,0x5f,0x38,0x30,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,
    0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,
    0x5d,0x20,0x2a,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,
    0x74,0x73,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x20,0x5f,0x31,0x35,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x28,0x28,0x28,0x5f,0x39,0x36,0x5b,0x30,0x5d,0x20,0x2b,0x20,0x5f,0x31,
    0x30,0x34,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x30,0x5d,
    0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x36,0x5b,0x30,0x5d,0x2c,0x20,0x28,0x28,0x5f,
    0x39,0x36,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,0x5b,0x31,0x5d,0x29,
    0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,
    0x34,0x36,0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x39,0x36,0x5b,0x32,0x5d,0x20,
    0x2b,0x20,0x5f,0x31,0x30,0x34,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,
    0x35,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x36,0x5b,0x32,0x5d,0x2c,
    0x20,0x28,0x28,0x5f,0x39,0x36,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,
    0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x33,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x31,0x34,0x36,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,
    0x20,0x3d,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,
    0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,
    0x31,0x36,0x39,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x31,0x37,0x30,
    0x20,0x3d,0x20,0x5f,0x31,0x36,0x39,0x20,0x2b,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,
    0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,0x61,0x6c,
    0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x31,0x37,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x37,0x39,0x20,0x3d,0x20,0x6d,
    0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x31,0x37,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x31,0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x31,0x37,0x39,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x33,0x32,0x5f,
    0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,
    0x30,0x66,0x29,0x2c,0x20,0x5f,0x31,0x35,0x39,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x61,0x5f,0x75,0x76,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,
    0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,
    0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x5f,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x5f,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x5f,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,
    0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer uv_tiling_ubo : register(b0)
    {
        float _13_tile_x : packoffset(c0);
        float _13_tile_y : packoffset(c0.y);
    };

    Texture2D<float4> diffuse_texture : register(t0);
    SamplerState diffuse_sampler : register(s0);

    static float2 v_uv;
    static float4 o_color;
    static float3 v_normal;

    struct SPIRV_Cross_Input
    {
        float3 v_normal : TEXCOORD0;
        float2 v_uv : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 o_color : SV_Target0;
    };

    void frag_main()
    {
        o_color = diffuse_texture.Sample(diffuse_sampler, float2(max(1.0f, _13_tile_x) * v_uv.x, max(1.0f, _13_tile_y) * v_uv.y));
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_uv = stage_input.v_uv;
        v_normal = stage_input.v_normal;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.o_color = o_color;
        return stage_output;
    }
*/
static const uint8_t lit_pixel_source_hlsl5[835] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x75,0x76,0x5f,0x74,0x69,0x6c,0x69,0x6e,
    0x67,0x5f,0x75,0x62,0x6f,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x31,0x33,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x78,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x5f,0x74,0x69,0x6c,0x65,
    0x5f,0x79,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x64,0x69,0x66,0x66,0x75,0x73,
    0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,
    0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x6d,0x61,0x78,
    0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x5f,0x31,0x33,0x5f,0x74,0x69,0x6c,0x65,0x5f,
    0x78,0x29,0x20,0x2a,0x20,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x78,
    0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x5f,0x31,0x33,0x5f,0x74,0x69,0x6c,0x65,0x5f,
    0x79,0x29,0x20,0x2a,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x5f,0x75,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x2e,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_vertex_ubo
    {
        float4x4 geometry_to_world;
        float4x4 normal_to_world;
        float4x4 world_to_clip;
        float4 blend_weights[16];
        float f_num_blend_shapes;
    };

    struct main0_out
    {
        float3 v_normal [[user(locn0)]];
        float2 v_uv [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 a_position [[attribute(0)]];
        float3 a_normal [[attribute(1)]];
        float2 a_uv [[attribute(2)]];
        float a_vertex_index [[attribute(3)]];
    };

    static inline __attribute__((always_inline))
    float3 evaluate_blend_shape(thread const int& vertex_index)
    {
        return float3(0.0);
    }

    vertex main0_out main0(main0_in in [[stage_in]], constant mesh_vertex_ubo& _32 [[buffer(0)]])
    {
        main0_out out = {};
        float3 local_pos = in.a_position;
        int param = int(in.a_vertex_index);
        float3 _84 = local_pos;
        float3 _85 = _84 + evaluate_blend_shape(param);
        local_pos = _85;
        out.gl_Position = _32.world_to_clip * float4((_32.geometry_to_world * float4(_85, 1.0)).xyz, 1.0);
        out.v_normal = fast::normalize((_32.normal_to_world * float4(in.a_normal, 0.0)).xyz);
        out.v_uv = in.a_uv;
        return out;
    }

*/
static const uint8_t static_vertex_source_metal_macos[1285] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x67,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,
    0x74,0x6f,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,
    0x5f,0x77,0x6f,0x72,0x6c,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,
    0x69,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,0x6e,0x75,
    0x6d,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x73,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,
    0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,
    0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,
    0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x65,0x76,0x61,0x6c,0x75,
    0x61,0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,
    0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x69,0x6e,0x74,
    0x26,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x72,
    0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,
    0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x75,0x62,0x6f,0x26,0x20,0x5f,0x33,0x32,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x69,
    0x6e,0x2e,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x38,
    0x34,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x38,0x35,0x20,0x3d,0x20,
    0x5f,0x38,0x34,0x20,0x2b,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,
    0x20,0x3d,0x20,0x5f,0x38,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x33,
    0x32,0x2e,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,0x69,0x70,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x5f,0x33,0x32,0x2e,0x67,0x65,
    0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,0x74,0x6f,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x38,0x35,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x3d,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x28,0x5f,0x33,0x32,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,
    0x5f,0x77,0x6f,0x72,0x6c,0x64,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x69,0x6e,0x2e,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,0x5f,0x75,0x76,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_vertex_ubo
    {
        float4x4 geometry_to_world;
        float4x4 normal_to_world;
        float4x4 world_to_clip;
        float4 blend_weights[16];
        float f_num_blend_shapes;
    };

    struct skin_vertex_ubo
    {
        float4x4 bones[64];
    };

    struct main0_out
    {
        float3 v_normal [[user(locn0)]];
        float2 v_uv [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 a_position [[attribute(0)]];
        float3 a_normal [[attribute(1)]];
        float2 a_uv [[attribute(2)]];
        float a_vertex_index [[attribute(3)]];
        int4 a_bone_indices [[attribute(4)]];
        float4 a_bone_weights [[attribute(5)]];
    };

    static inline __attribute__((always_inline))
    float3 evaluate_blend_shape(thread const int& vertex_index)
    {
        return float3(0.0);
    }

    vertex main0_out main0(main0_in in [[stage_in]], constant mesh_vertex_ubo& _32 [[buffer(0)]], constant skin_vertex_ubo& _80 [[buffer(1)]])
    {
        main0_out out = {};
        float4x4 _96 = _80.bones[in.a_bone_indices.x] * in.a_bone_weights.x;
        float4x4 _104 = _80.bones[in.a_bone_indices.y] * in.a_bone_weights.y;
        float4x4 _125 = _80.bones[in.a_bone_indices.z] * in.a_bone_weights.z;
        float4x4 _146 = _80.bones[in.a_bone_indices.w] * in.a_bone_weights.w;
        float4x4 _159 = float4x4(((_96[0] + _104[0]) + _125[0]) + _146[0], ((_96[1] + _104[1]) + _125[1]) + _146[1], ((_96[2] + _104[2]) + _125[2]) + _146[2], ((_96[3] + _104[3]) + _125[3]) + _146[3]);
        float3 local_pos = in.a_position;
        int param = int(in.a_vertex_index);
        float3 _169 = local_pos;
        float3 _170 = _169 + evaluate_blend_shape(param);
        local_pos = _170;
        float4 _179 = _159 * float4(_170, 1.0);
        out.gl_Position = _32.world_to_clip * float4(_179.xyz, 1.0);
        out.v_normal = fast::normalize((_159 * float4(in.a_normal, 0.0)).xyz);
        out.v_uv = in.a_uv;
        return out;
    }

*/
static const uint8_t skinned_vertex_source_metal_macos[1957] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x67,0x65,0x6f,0x6d,0x65,0x74,0x72,0x79,0x5f,
    0x74,0x6f,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x5f,0x74,0x6f,
    0x5f,0x77,0x6f,0x72,0x6c,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,0x63,0x6c,
    0x69,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x5f,0x6e,0x75,
    0x6d,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x73,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x6b,0x69,0x6e,0x5f,
    0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x62,0x6f,0x6e,0x65,0x73,0x5b,
    0x36,0x34,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x5f,0x75,0x76,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x34,
    0x20,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x20,
    0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x34,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x5f,0x62,
    0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x20,0x5b,0x5b,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x35,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,
    0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,
    0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x65,0x76,0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,
    0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,0x70,0x65,0x28,0x74,0x68,0x72,0x65,0x61,
    0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x69,0x6e,0x74,0x26,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,
    0x6f,0x26,0x20,0x5f,0x33,0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,
    0x30,0x29,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x73,
    0x6b,0x69,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x62,0x6f,0x26,0x20,
    0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x31,0x29,0x5d,
    0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x39,0x36,0x20,0x3d,0x20,
    0x5f,0x38,0x30,0x2e,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x2e,0x61,0x5f,0x62,
    0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x5d,0x20,0x2a,
    0x20,0x69,0x6e,0x2e,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,
    0x74,0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x20,0x5f,0x31,0x30,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x62,0x6f,
    0x6e,0x65,0x73,0x5b,0x69,0x6e,0x2e,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x5d,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x5f,
    0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x32,
    0x35,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,
    0x2e,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x7a,0x5d,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x34,0x36,0x20,0x3d,0x20,0x5f,0x38,
    0x30,0x2e,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x2e,0x61,0x5f,0x62,0x6f,0x6e,
    0x65,0x5f,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x5d,0x20,0x2a,0x20,0x69,
    0x6e,0x2e,0x61,0x5f,0x62,0x6f,0x6e,0x65,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x73,
    0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x5f,0x31,0x35,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x28,0x28,0x28,0x5f,0x39,0x36,0x5b,0x30,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,
    0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x30,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x31,0x34,0x36,0x5b,0x30,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x39,0x36,
    0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,0x5b,0x31,0x5d,0x29,0x20,0x2b,
    0x20,0x5f,0x31,0x32,0x35,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x36,
    0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x39,0x36,0x5b,0x32,0x5d,0x20,0x2b,0x20,
    0x5f,0x31,0x30,0x34,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,
    0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x36,0x5b,0x32,0x5d,0x2c,0x20,0x28,
    0x28,0x5f,0x39,0x36,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,0x31,0x30,0x34,0x5b,0x33,
    0x5d,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x35,0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,
    0x5f,0x31,0x34,0x36,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x69,0x6e,0x74,0x28,0x69,0x6e,0x2e,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x31,0x36,0x39,0x20,0x3d,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,
    0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x5f,0x31,0x37,0x30,0x20,0x3d,0x20,0x5f,0x31,0x36,0x39,0x20,0x2b,0x20,0x65,0x76,
    0x61,0x6c,0x75,0x61,0x74,0x65,0x5f,0x62,0x6c,0x65,0x6e,0x64,0x5f,0x73,0x68,0x61,
    0x70,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,
    0x6f,0x63,0x61,0x6c,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x31,0x37,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x37,0x39,
    0x20,0x3d,0x20,0x5f,0x31,0x35,0x39,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x5f,0x31,0x37,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x5f,0x33,0x32,0x2e,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x74,0x6f,0x5f,
    0x63,0x6c,0x69,0x70,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x31,
    0x37,0x39,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,
    0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x28,0x5f,0x31,0x35,0x39,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x69,0x6e,0x2e,0x61,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,0x5f,0x75,0x76,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct uv_tiling_ubo
    {
        float tile_x;
        float tile_y;
    };

    struct main0_out
    {
        float4 o_color [[color(0)]];
    };

    struct main0_in
    {
        float2 v_uv [[user(locn1)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant uv_tiling_ubo& _13 [[buffer(0)]], texture2d<float> diffuse_texture [[texture(0)]], sampler diffuse_sampler [[sampler(0)]])
    {
        main0_out out = {};
        out.o_color = diffuse_texture.sample(diffuse_sampler, float2(fast::max(1.0, _13.tile_x) * in.v_uv.x, fast::max(1.0, _13.tile_y) * in.v_uv.y));
        return out;
    }

*/
static const uint8_t lit_pixel_source_metal_macos[622] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x75,
    0x76,0x5f,0x74,0x69,0x6c,0x69,0x6e,0x67,0x5f,0x75,0x62,0x6f,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x69,0x6c,0x65,0x5f,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x69,0x6c,0x65,0x5f,
    0x79,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x6f,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,
    0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x75,0x76,0x5f,0x74,0x69,0x6c,0x69,0x6e,0x67,0x5f,0x75,0x62,0x6f,0x26,
    0x20,0x5f,0x31,0x33,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,
    0x6f,0x61,0x74,0x3e,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x5b,0x5b,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,
    0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,
    0x78,0x28,0x31,0x2e,0x30,0x2c,0x20,0x5f,0x31,0x33,0x2e,0x74,0x69,0x6c,0x65,0x5f,
    0x78,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x31,0x2e,0x30,0x2c,0x20,0x5f,
    0x31,0x33,0x2e,0x74,0x69,0x6c,0x65,0x5f,0x79,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,
    0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* skinned_lit_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)skinned_vertex_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)lit_pixel_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "a_position";
            desc.attrs[1].glsl_name = "a_normal";
            desc.attrs[2].glsl_name = "a_uv";
            desc.attrs[3].glsl_name = "a_vertex_index";
            desc.attrs[4].glsl_name = "a_bone_indices";
            desc.attrs[5].glsl_name = "a_bone_weights";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 29;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "mesh_vertex_ubo";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 4096;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 256;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "skin_vertex_ubo";
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[2].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[2].glsl_uniforms[0].glsl_name = "uv_tiling_ubo";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "diffuse_texture_diffuse_sampler";
            desc.label = "skinned_lit_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)skinned_vertex_source_hlsl5;
            desc.vertex_func.d3d11_target = "vs_5_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)lit_pixel_source_hlsl5;
            desc.fragment_func.d3d11_target = "ps_5_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.attrs[2].hlsl_sem_name = "TEXCOORD";
            desc.attrs[2].hlsl_sem_index = 2;
            desc.attrs[3].hlsl_sem_name = "TEXCOORD";
            desc.attrs[3].hlsl_sem_index = 3;
            desc.attrs[4].hlsl_sem_name = "TEXCOORD";
            desc.attrs[4].hlsl_sem_index = 4;
            desc.attrs[5].hlsl_sem_name = "TEXCOORD";
            desc.attrs[5].hlsl_sem_index = 5;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 4096;
            desc.uniform_blocks[1].hlsl_register_b_n = 1;
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].hlsl_register_b_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].hlsl_register_t_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "skinned_lit_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)skinned_vertex_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)lit_pixel_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 4096;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].msl_buffer_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].msl_texture_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].msl_sampler_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "skinned_lit_shader";
        }
        return &desc;
    }
    return 0;
}
static inline const sg_shader_desc* static_lit_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)static_vertex_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)lit_pixel_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "a_position";
            desc.attrs[1].glsl_name = "a_normal";
            desc.attrs[2].glsl_name = "a_uv";
            desc.attrs[3].glsl_name = "a_vertex_index";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 29;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "mesh_vertex_ubo";
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[2].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[2].glsl_uniforms[0].glsl_name = "uv_tiling_ubo";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "diffuse_texture_diffuse_sampler";
            desc.label = "static_lit_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)static_vertex_source_hlsl5;
            desc.vertex_func.d3d11_target = "vs_5_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)lit_pixel_source_hlsl5;
            desc.fragment_func.d3d11_target = "ps_5_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.attrs[2].hlsl_sem_name = "TEXCOORD";
            desc.attrs[2].hlsl_sem_index = 2;
            desc.attrs[3].hlsl_sem_name = "TEXCOORD";
            desc.attrs[3].hlsl_sem_index = 3;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].hlsl_register_b_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].hlsl_register_t_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "static_lit_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)static_vertex_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)lit_pixel_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 464;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[2].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[2].size = 16;
            desc.uniform_blocks[2].msl_buffer_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].msl_texture_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].msl_sampler_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "static_lit_shader";
        }
        return &desc;
    }
    return 0;
}
